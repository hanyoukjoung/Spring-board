<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!-- 
		스프링 프레임웍의 트랜잭션 설정 및 활용
		1. AOP 활용(설정파일 내 xml 코드 구성)
		2. 어노테이션 활용(서비스 레이어의 클래스 내 매서드 상단에 @Transactional
		
		ex) class IMemberServiceImpl implements IMemberService{
			@Transational(propagation=Required_New, rollbackFor={SqlException.class, NestedExcepiton.class,....}
			public void insertMemberInfo(MemberVO memberInfo) throws Exception{
				dao.insertMemberInfo(memberInfo);
			}
		
		}
		스프링 프레임웍 트랜잭션 처리 프로세스
		*컨트롤러 매서드의 접근 지정자(public 선언)
																트랜잭션 선언 
			DispatcherServlet			controller Layer  ->	Service Layer  ->   DAO Layer(쿼리질의)
			(WebApplicationContext)								트랜잭션 선언 정보		 쿼리 정상 질의
			 DataSourceTransationManager						전달(Controller Layer)
			트랜잭션 선언 정보 취득		=========================================================================
			발생된 익셉션 정보
			(트랜잭션 처리-commit				트랜잭션 선언 정보		트랜잭션 선언 정보	익셉션 전달(Service Layer)
						rollback)			발생된 익셉션 정보		발생된 익셉션 정보
		proxy-target-class="false"
			 @Transactional 
			 서비스 레이어 내 클래스가 Interface를 implements하고,
			 @Transactional 상단에 선언된 매서드가 Interface를 오버라이딩으로 활용
			 
		proxy-target-class="true"
			* CGLIB가 처리 (해당 매서드의 프로토타입 추출 및 트랜잭션 매니저에 제공)
			 @Transactional 
			 서비스 레이어 내 클래스가 Interface를 implements하지않고,
			 @Transactional 상단에 선언으로 활용
		
		
	 -->
	 <tx:annotation-driven transaction-manager="transactionMGR" proxy-target-class="false"/>

</beans>
